import json
import logging
import sys
from abc import ABC, abstractmethod
from typing import List

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='library.log', level=logging.INFO, format='%(asctime)s - %(message)s')


# –ü–∞—Ç–µ—Ä–Ω Prototype
class Prototype(ABC):
    @abstractmethod
    def clone(self):
        pass


# –°—É—Ç–Ω–æ—Å—Ç—ñ
class Book(Prototype):
    def __init__(self, title: str, author: str, year: int):
        self.title = title
        self.author = author
        self.year = year

    def __str__(self):
        return f"{self.title} by {self.author}, {self.year}"

    def clone(self):
        return Book(self.title, self.author, self.year)


# –§–∞–±—Ä–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
class UserFactory:
    @staticmethod
    def create_user(user_type: str, name: str):
        if user_type == "Librarian":
            return Librarian(name)
        elif user_type == "Reader":
            return Reader(name)
        else:
            raise ValueError("Unknown user type")


class User(ABC):
    def __init__(self, name: str):
        self.name = name

    @abstractmethod
    def get_role(self) -> str:
        pass

    def __str__(self):
        return f"{self.get_role()}: {self.name}"


class Librarian(User):
    def get_role(self):
        return "Librarian"


class Reader(User):
    def get_role(self):
        return "Reader"


# –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (–°—ñ–Ω–≥–ª—Ç–æ–Ω + –§–∞—Å–∞–¥)
class LibraryManager:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.books: List[Book] = []
            cls._instance.users: List[User] = []
        return cls._instance

    def add_book(self, book: Book):
        self.books.append(book)
        logging.info(f"Added book: {book}")

    def remove_book(self, title: str):
        initial_length = len(self.books)
        self.books = [book for book in self.books if book.title != title]
        if len(self.books) < initial_length:
            logging.info(f"Removed book: {title}")
        else:
            logging.warning(f"Book not found: {title}")

    def edit_book(self, old_title: str, new_book: Book):
        for i, book in enumerate(self.books):
            if book.title == old_title:
                self.books[i] = new_book
                logging.info(f"Edited book: {old_title} -> {new_book}")
                return
        logging.warning(f"Book not found: {old_title}")

    def add_user(self, user: User):
        self.users.append(user)
        logging.info(f"Added user: {user}")

    def search_book(self, keyword: str) -> List[Book]:
        return [book for book in self.books if keyword.lower() in book.title.lower()]

    def save_to_file(self, filename: str):
        data = {
            "books": [{"title": book.title, "author": book.author, "year": book.year} for book in self.books],
            "users": [{"name": user.name, "role": user.get_role()} for user in self.users]
        }

        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

        logging.info(f"üìö –î–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")
        print(f"‚úÖ –î–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {filename}.")

    def load_from_file(self, filename: str):
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                data = json.load(file)

                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–Ω–∏–≥–∏
                self.books = [Book(**book) for book in data.get("books", [])]

                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                self.users = [UserFactory.create_user(user["role"], user["name"]) for user in data.get("users", [])]

            logging.info(f"üìÇ –î–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: {filename}")
            print(f"‚úÖ –î–∞–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É {filename}.")

        except FileNotFoundError:
            logging.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É {filename}: {e}")
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª {filename}. –î–µ—Ç–∞–ª—ñ: {e}")


# –í—Ö—ñ–¥ —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def login_or_register():
    library = LibraryManager()

    while True:
        print("\n1. –£–≤—ñ–π—Ç–∏")
        print("2. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == "1":  # –í—Ö—ñ–¥
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ").strip()
            for user in library.users:
                if user.name.lower() == name.lower():
                    print(f"–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π. –í—ñ—Ç–∞—î–º–æ, {user.name}!")
                    return user
            print("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.")

        elif choice == "2":  # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: ").strip()
            role = input("–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É (Librarian/Reader): ").strip().lower()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —É –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
            if role not in ["librarian", "reader"]:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–≤–µ–¥—ñ—Ç—å Librarian –∞–±–æ Reader.")
                continue

            role = role.capitalize()  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ "Librarian" –∞–±–æ "Reader"
            user = UserFactory.create_user(role, name)
            library.add_user(user)
            print(f"‚úÖ –ê–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –í—ñ—Ç–∞—î–º–æ, {user.name} ({user.get_role()})!")
            return user

        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


# –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def menu():
    library = LibraryManager()
    library.load_from_file("library.json")

    user = login_or_register()

    running = True  # –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–∏—Ö–æ–¥—É

    while running:
        print("\n–ú–µ–Ω—é:")
        print("1. –ü–æ—à—É–∫ –∫–Ω–∏–≥–∏")
        if user.get_role() == "Librarian":
            print("2. –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–≥—É")
            print("3. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É")
            print("4. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–∏–≥—É")
            print("5. –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ —Ñ–∞–π–ª")
            print("6. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É")
        print("7. –í–∏–π—Ç–∏")

        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ")

        try:
            if choice == "1":
                keyword = input("–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É: ")
                results = library.search_book(keyword)
                if results:
                    print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:")
                    for book in results:
                        print(book)
                else:
                    print("–ö–Ω–∏–≥ –∑–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

            elif choice == "7":  # –í–ò–•–Ü–î –¥–ª—è –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                library.save_to_file("library.json")
                print("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                running = False  # –í–∏—Ö—ñ–¥ –∑ —Ü–∏–∫–ª—É

            elif user.get_role() == "Librarian":  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó –ª–∏—à–µ –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è
                if choice == "2":
                    title = input("–ù–∞–∑–≤–∞: ")
                    author = input("–ê–≤—Ç–æ—Ä: ")
                    while True:
                        try:
                            year = int(input("–†—ñ–∫: "))
                            break
                        except ValueError:
                            print("–ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ä–æ–∫—É.")
                    library.add_book(Book(title, author, year))

                elif choice == "3":
                    title = input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
                    library.remove_book(title)

                elif choice == "4":
                    old_title = input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ")
                    new_title = input("–ù–æ–≤–∞ –Ω–∞–∑–≤–∞: ")
                    new_author = input("–ù–æ–≤–∏–π –∞–≤—Ç–æ—Ä: ")
                    while True:
                        try:
                            new_year = int(input("–ù–æ–≤–∏–π —Ä—ñ–∫: "))
                            break
                        except ValueError:
                            print("–ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ä–æ–∫—É.")
                    library.edit_book(old_title, Book(new_title, new_author, new_year))

                elif choice == "5":
                    library.save_to_file("library.json")

                elif choice == "6":
                    library.load_from_file("library.json")

            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        except Exception as e:
            logging.error(f"Unhandled exception: {e}")
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    library = LibraryManager()
    menu()
